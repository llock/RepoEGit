pipeline {
    agent any
    stages {
        stage('source') {
            steps {
                echo 'source'
                //git clone commented out as it is done for Jenkinsfile in Jenkins configuration instead
                //git 'https://github.com/llock/RepoEGit.git'
                sh label: 'Current location:', script: 'pwd'
                sh label: 'Directory list:', script: 'ls -R'
            }
        }
        stage('analysis') {
            def scannerHome = tool 'SonarQube Scanner'
            steps {
                echo 'analysis'
                withSonarQubeEnv ('SonarQube') {
             // sh label: 'Execute SonarQube Scanner', script: "/var/jenkins_home/tools/hudson.plugins.sonar.SonarRunnerInstallation/SonarQube_Scanner/bin/sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL}  -Dsonar.login=${SONAR_AUTH_TOKEN}  -Dsonar.projectKey=batch-zos -Dsonar.sources=./EGit_Test_Proj/src"
                sh label: 'Execute SonarQube Scanner', script: "${scannerHome}/bin/sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL}  -Dsonar.login=${SONAR_AUTH_TOKEN}  -Dsonar.projectKey=batch-zos -Dsonar.sources=./EGit_Test_Proj/src"
                }
            }
        }
        stage('build') {
            steps {
                echo 'build'
                echo "BUILD_ID=${BUILD_ID}"
                echo "BUILD_TIMESTAMP=${BUILD_TIMESTAMP}"
                sh label: 'Before Change', script: 'cat ./EGit_Test_Proj/build/BUZRTMP.jcl'
                sh label: 'Replace token', script: 'sed s/@BUILD_TIMESTAMP@/${BUILD_TIMESTAMP}/g ./EGit_Test_Proj/build/BUZRTMP.jcl > ./EGit_Test_Proj/build/BUZRJCL.jcl'
                sh label: 'After Change', script: 'cat ./EGit_Test_Proj/build/BUZRJCL.jcl'

                // ftpPublisher parameter asciiMode must set to true to perform ascii to ebcdic conversion.  If false, it will be transferred as binary.
                ftpPublisher alwaysPublishFromMaster: false, continueOnError: false, failOnError: false, paramPublish: [parameterName:""], masterNodeName: "master", publishers: [[configName: 'DC03', transfers: [[asciiMode: true, cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '**/*.cbl,**/*.cpy,**/shiplist.xml']], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false]]
                step([$class: 'ZOSJobSubmitter', JESINTERFACELEVEL1: false, MaxCC: '0000', credentialsId: '82a5694e-761c-4f64-b722-fb7c689c6b47', deleteJobFromSpool: false, jobFile: './EGit_Test_Proj/build/OCOPY.jcl', jobLogToConsole: false, port: 21, server: '9.144.41.103', wait: true, waitTime: 0])
                step([$class: 'ZOSJobSubmitter', JESINTERFACELEVEL1: false, MaxCC: '0000', credentialsId: '82a5694e-761c-4f64-b722-fb7c689c6b47', deleteJobFromSpool: false, jobFile: './EGit_Test_Proj/build/DSNHICOB.jcl', jobLogToConsole: false, port: 21, server: '9.144.41.103', wait: true, waitTime: 0])
                step([$class: 'ZOSJobSubmitter', JESINTERFACELEVEL1: false, MaxCC: '0000', credentialsId: '82a5694e-761c-4f64-b722-fb7c689c6b47', deleteJobFromSpool: false, jobFile: './EGit_Test_Proj/build/BUZRJCL.jcl', jobLogToConsole: false, port: 21, server: '9.144.41.103', wait: true, waitTime: 0])
            }
        }
        stage('deploy') {
            steps {
                echo 'deploy placeholder only for now.'
             //
             // The following script is pending for updates after ucd agent is brought online again
             //
             // step([$class: 'UCDeployPublisher',
             //      siteName: 'IBM SBY UCD Server',
             //      deploy: [
             //                $class: 'com.urbancode.jenkins.plugins.ucdeploy.DeployHelper$DeployBlock',
             //                deployApp: 'Louis_zOS_DB2_Jenkins',
             //                deployEnv: 'Louis DEV',
             //                deployProc: 'Deploy DB2 App',
             //                deployVersions: '${BUILD_TIMESTAMP}',
             //                deployOnlyChanged: false
             //              ]
             //       ])
            }
        }
    }
    post {
        always {
            echo 'One way or another, I have finished'
            deleteDir() /* clean up our workspace */
        }
        success {
            echo 'I succeeeded!'
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed :('
        }
        changed {
            echo 'Things were different before...'
        }
    }
}